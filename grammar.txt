Sorry if you don't like my symbols (using some regex stuff because I am lazy).
All whitespace is ignored, meaning that any spaces in the grammar may also be
replaced by any number (including zero) of spaces.

<S>::=(<statement>|<expression>|<control>)*
<statement>::=<name> ' = ' <expression>
<name>::=(<single_name>|<template_call>)('.'(<single_name>|<template_call>))*
<single_name>::=(<letter>|'_'|'-') (<letter>|<digit>|'_'|'-')*
<letter>::=[a-z][A-Z]
<digit>::=[0-9]
<template_call>::=(<template>|<single_name>)? <passable_expressions>
<passable_expressions>::= ' ( ' ( <name> (', ' <name>)* )? ' ) '
<expression>::=(<object>|<addition>|<subtraction>|<term>|<boolean_expression>)' ; '
<object>::=<integer>|<float>|<boolean>|<string>|<template>|<name>
<integer>::=[+-]?<digit>+
<float>::=[+-]?<digit>+ '.' <digit>+
<boolean>::='true'|'false'
<string>::="'"<character>*"'"
<template>::='template ' <passable_expressions>? '{ ' <S> ('return ( ' <expression> ' ) ; ')? ' } '
<addition>::=<term> ' + ' (<term>|<addition>|<subtraction>)
<term>::=('(' <expression> ')')|<multiplication>|<division>
<multiplication>::=<term> ' * ' <term>
<division>::=<term> ' / ' <term>
<subtraction>::=<term> ' - ' (<term>|<addition>|<subtraction>)
<boolean_expression>::=<boolean_statement>((' AND '|' OR ')<boolean_statement>)*
<boolean_expression>::=<object>((' == '|' <= '|' >= '|' != ') <object)?
<control>::=<if>|<while>
<if>::='if ( ' <expression> ' ) { ' <S> ' }' (' else if ( ' <expression> ' ) { ' <S> ' }')* (' else ( ' <expression> ' ) { ' <S> ' }')?
<while>::='while (' <expression> ') {' <S> '}'

Please note that there are reserved words that cannot be a single_name. These are:
    if
    else
    while
    template
    return
    true
    false

The name 'container' is read-only, that is, it cannot be assigned to.
