(* any of the spaces in the following definition may be replaced by any number
   of spaces (including zero), and will still be valid *)
underscore program = sections ;
sections = { statement | expression with semicolon | control | comment | return
           | break | continue } ;
statement = reference, ' = ', expression with semicolon ;
reference = (single name | template instantiation | function call), { ( ' . ', (
            single name | template instantiation | function call) ) | ( ' [ ', (
            expression without semicolon), ' ] ' ) } ;
single name = letter, { letter | digit | '_'} ;
letter = ? any upper or lower case letter ? ;
digit = ? any digit ? ;
template instantiation = ( template | single name ), passable expressions ;
template = ' template ', passable names, ' { ', sections, ' } ' ;
passable names = ' ( ', [ single name, { ' , ', single name } ], ' ) ' ;
passable expressions = ' ( ', [ expression, { ' , ', expression } ], ' ) ' ;
expression = not | ( object_or_bracketed_expression, opperator,
             object_or_bracketed_expression ) ;
not = ' NOT ' object_or_bracketed_expression ;
object or contained expression = ( ' ( ', expression, ' ) ' ) | object ;
opperator = ' AND ' | ' OR ' | ' == ' | ' <= ' | ' < ' | ' >= ' | ' > ' |
            ' != ' | ' + ' | ' - ' | ' * ' | ' / ' | ' ^ ' ;
object = integer | float | boolean | string | none | template | function |
         reference ;
integer = [ ' + ' | ' - ' ], digit, { digit } ;
float = [ ' + ' | ' - ' ], digit, { digit }, ' . ', digit, { digit } ;
boolean = ' true ' | ' false ' ;
string = ? any characters contained in single or triple single or double quotes
         ? ;
none = ' none ' ;
function = ' function ', passable names, ' { ', sections, ' } ' ;
function call = ( function | single name ), passable expressions ;
expression with semicolon = expression, ' ; ' ;
control = ( if | while ), ' ; ' ;
if = ' if ( ', expression, ' ) { ', sections, ' } ', [ ' else { ', sections,
     ' } ']  ;
while = ' while ( ', expression, ' ) { ', sections, ' } ' ;
comment = ' #', ? any characters other than # ?, '# ' ;
break = ' break ; ' ;
return = ' return ( ', expression, ' ) ; ' ;
continue = ' continue ; ' ;
